# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  answer(
    where: AnswerWhereInput! = {}
    orderBy: [AnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Answer!]
  answerCount(where: AnswerWhereInput! = {}): Int
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  answer: AnswerManyRelationFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AnswerManyRelationFilter {
  every: AnswerWhereInput
  some: AnswerWhereInput
  none: AnswerWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  answer: AnswerRelateToManyForUpdateInput
  isAdmin: Boolean
}

input AnswerRelateToManyForUpdateInput {
  disconnect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  answer: AnswerRelateToManyForCreateInput
  isAdmin: Boolean
}

input AnswerRelateToManyForCreateInput {
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
}

type Question {
  id: ID!
  question: String
  type: Type
  answer(
    where: AnswerWhereInput! = {}
    orderBy: [AnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Answer!]
  answerCount(where: AnswerWhereInput! = {}): Int
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  question: StringFilter
  type: TypeWhereInput
  answer: AnswerManyRelationFilter
}

input QuestionOrderByInput {
  id: OrderDirection
  question: OrderDirection
}

input QuestionUpdateInput {
  question: String
  type: TypeRelateToOneForUpdateInput
  answer: AnswerRelateToManyForUpdateInput
}

input TypeRelateToOneForUpdateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
  disconnect: Boolean
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  question: String
  type: TypeRelateToOneForCreateInput
  answer: AnswerRelateToManyForCreateInput
}

input TypeRelateToOneForCreateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
}

type Type {
  id: ID!
  type: Int
  subheading: String
  description: String
  question(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  questionCount(where: QuestionWhereInput! = {}): Int
}

input TypeWhereUniqueInput {
  id: ID
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
  id: IDFilter
  type: IntFilter
  subheading: StringFilter
  description: StringFilter
  question: QuestionManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input TypeOrderByInput {
  id: OrderDirection
  type: OrderDirection
  subheading: OrderDirection
  description: OrderDirection
}

input TypeUpdateInput {
  type: Int
  subheading: String
  description: String
  question: QuestionRelateToManyForUpdateInput
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input TypeUpdateArgs {
  where: TypeWhereUniqueInput!
  data: TypeUpdateInput!
}

input TypeCreateInput {
  type: Int
  subheading: String
  description: String
  question: QuestionRelateToManyForCreateInput
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

type Answer {
  id: ID!
  answer: Int
  user: User
  question: Question
}

input AnswerWhereUniqueInput {
  id: ID
}

input AnswerWhereInput {
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
  id: IDFilter
  answer: IntFilter
  user: UserWhereInput
  question: QuestionWhereInput
}

input AnswerOrderByInput {
  id: OrderDirection
  answer: OrderDirection
}

input AnswerUpdateInput {
  answer: Int
  user: UserRelateToOneForUpdateInput
  question: QuestionRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input QuestionRelateToOneForUpdateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
}

input AnswerUpdateArgs {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateInput!
}

input AnswerCreateInput {
  answer: Int
  user: UserRelateToOneForCreateInput
  question: QuestionRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input QuestionRelateToOneForCreateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(
    where: QuestionWhereUniqueInput!
    data: QuestionUpdateInput!
  ): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createType(data: TypeCreateInput!): Type
  createTypes(data: [TypeCreateInput!]!): [Type]
  updateType(where: TypeWhereUniqueInput!, data: TypeUpdateInput!): Type
  updateTypes(data: [TypeUpdateArgs!]!): [Type]
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteTypes(where: [TypeWhereUniqueInput!]!): [Type]
  createAnswer(data: AnswerCreateInput!): Answer
  createAnswers(data: [AnswerCreateInput!]!): [Answer]
  updateAnswer(where: AnswerWhereUniqueInput!, data: AnswerUpdateInput!): Answer
  updateAnswers(data: [AnswerUpdateArgs!]!): [Answer]
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteAnswers(where: [AnswerWhereUniqueInput!]!): [Answer]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  questions(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  question(where: QuestionWhereUniqueInput!): Question
  questionsCount(where: QuestionWhereInput! = {}): Int
  types(
    where: TypeWhereInput! = {}
    orderBy: [TypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Type!]
  type(where: TypeWhereUniqueInput!): Type
  typesCount(where: TypeWhereInput! = {}): Int
  answers(
    where: AnswerWhereInput! = {}
    orderBy: [AnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Answer!]
  answer(where: AnswerWhereUniqueInput!): Answer
  answersCount(where: AnswerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
